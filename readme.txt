В данной программе реализована архитектура: один клиент. клиент и сервер 
на одном компьютере. Процесс-клиент передает процессу-серверу с помощью 
механизма сокетов команду(в строковом предствлении, которое задает 
пользователь). Анализ команды происходит методом рекурсивного спуска с 
действиями(то есть каждая лексема прочитывается один раз). Для этого
реализован класс Parser c публичным методом parse(). Метод parse проходит
по тексту команды, если встречается неподходящая лексема, выбрасывается 
исключение. Обработке каждой команды соответствует метод класса Parser.
Метод parse выдает строку с результатом выполнения команды, который передается
клиенту. Если сервер зафиксировал ошибку(вылетело исключение), она выдается
вместо результа.Для выхода из программы необходимо написать команду EXIT.

При обработке команды CREATE(если не выбрасывается исключение на каком-то 
этапе обработки - далее аналогично) создается файл с именем, совпадающим с 
именем таблицы, и в нее записывается заголовок, по которому можно определить 
структуру таблицы. Помимо некорректного типа лексемы, исключение выбрасывается, 
если несколько полей таблицы имеют одинаковые имена.
При обработке команды DROP считывается имя таблицы, если такая есть, то 
удаляется соответствующий ее файл, иначе выдается ошибка.
При обработке команды INSERT, если есть необходимая таблица(то есть файл), в нее
добавляется строка, иначе - ошибка.
При обработке команды DELETE создается экземпляр класса Table, соответствующий 
нужной таблице, далее вызывается метод where(). Он проходит where-кляузу, и 
если нет ошибок, записывает информацию о ней в объект класса Table. Далее в 
нем вызывается метод delet().
Аналогично, метод Select() записывает в Table, какие поля необходимо вывести. А 
затем проходит where-кляузу и вызывает метод select() класса Table.
Метод Update() действует аналогично.

Также в последних 3 методах при создании объекта класса Table, вызывается его
метод get_struct(), возвращающий экземпляр класса Column_struct, в которой 
содержится информация с заголовка файла(то есть информация о структуре таблицы). 
При обработке команд DELETE, SELECT и UPDATE, с помощью этой структуры можно 
сопоставить типы полей таблицы и типы выражений, и в случае несоответствия(например,
если в where-кляузе сравниваются число и текстовое поле) выдать ошибку.
Для представления логических и численных выражений используется класс Poliz, который
содержит указатели на объекты класса Item и его наследников. Класс Poliz обладает
методом exec(), который считает значение полиза(0 или 1 для логических выражения,
long число - для численных).

Методы update(), delet() и select() класса Table, действуют аналогично:
читают запись таблицы(метод get_record() возвращает структуру Record); вызывают функцию 
where класса Table, которая выдает true, если необходимо выполнить преобразование записи;
в этом случае делают преобразование записи(обновляют, удалают или выводят).

Помимо описанных выше обрабатываются следующие ошибки:
-если при создании таблицы вводится имя уже существующей таблицы, выбрасывается исключение
-если строка-образец в LIKE-альтернативе where-кляузы имеет некорректный вид(не встречается
закрывающая скобка ']'), выдается ошибка
-если при вычислении логического или численного выражения выполняется деление на 0(или взятие
остатка при делении на 0), то выбрасывается исключени, которе "ловится"(если это выражение
получилось при определении значения where-кляузы, то считается ложной; в противном случае -
данное выражение должно быть присвоено определенному полю в функции Update - update не выполняется)

Также учитывается возможность экранирования символов, например '%', в строке-образце.